{"version":3,"sources":["errorBoundary.js","contextProvider.js","App.js","serviceWorker.js","index.js","modeContext.js"],"names":["ErrorBoundary","props","state","hasError","this","children","error","React","Component","ContextProvider","useState","mode","setMode","toogleMode","newMode","sessionStorage","setItem","useEffect","value","getItem","Provider","theme","Page1","lazy","App","className","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","ModeContext","createContext"],"mappings":"8QA6BiBA,E,YAzBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAU,GAFR,E,sEAgBjB,OAAIC,KAAKF,MAAMC,SAEN,qDAGFC,KAAKH,MAAMI,Y,gDAhBYC,GAE9B,MAAO,CAAEH,UAAU,O,GARGI,IAAMC,W,6BCuBnBC,EAtBS,SAAAR,GAAU,IAAD,EACPS,mBAAS,SADF,mBACxBC,EADwB,KAClBC,EADkB,KAGzBC,EAAa,WACjB,IAAMC,EAAmB,UAATH,EAAmB,OAAS,QAC5CC,EAAQE,GACRC,eAAeC,QAAQ,OAAQF,IAGjCG,qBAAU,WACR,IAAIC,EAAQH,eACTI,QAAQ,QAGb,OAFIP,EAAQM,GAGV,kBAAC,IAAYE,SAAb,CAAsBF,MAAO,CAAEL,aAAYF,SACzC,kBAAC,IAAD,CAAeU,MAAO,CAAEV,SAASV,EAAMI,eCfvCiB,EAAQf,IAAMgB,MAAK,kBAAM,gCAkBhBC,MAhBf,WAEE,OACE,kBAAC,EAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,4CAElB,kBAACJ,EAAD,WCHQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a,+BEzI5B,WAEMC,EAFN,OAEoBtC,EAAMuC,cAAc,CACpCnC,KAAM,UAGKkC,Q","file":"static/js/main.3e9f18ff.chunk.js","sourcesContent":["import React from'react'\r\n\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { hasError: true };\r\n    }\r\n  \r\n    // componentDidCatch(error, errorInfo) {\r\n    //   // You can also log the error to an error reporting service\r\n    //   logErrorToMyService(error, errorInfo);\r\n    // }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\n  export default ErrorBoundary","import React, { useState, useEffect } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport ModeContext from \"./modeContext\";\r\n\r\nconst ContextProvider = props => {\r\n  const [mode, setMode] = useState(\"light\");\r\n\r\n  const toogleMode = () => {\r\n    const newMode = mode === \"light\" ? \"dark\" : \"light\";\r\n    setMode(newMode);\r\n    sessionStorage.setItem(\"mode\", newMode)\r\n  };\r\n\r\n  useEffect(() => {\r\n    let value = sessionStorage\r\n      .getItem(\"mode\")\r\n      setMode(value)\r\n\r\n  return (\r\n    <ModeContext.Provider value={{ toogleMode, mode }}>\r\n      <ThemeProvider theme={{ mode }}>{props.children}</ThemeProvider>\r\n    </ModeContext.Provider>\r\n  );\r\n});\r\n}\r\n\r\nexport default ContextProvider\r\n","import React, { Suspense, useState, useEffect } from \"react\";\nimport ErrorBoundary from \"./errorBoundary\";\nimport \"./App.css\";\nimport ContextProvider from './contextProvider'\n\nconst Page1 = React.lazy(() => import(\"./page\"));\n\nfunction App() {\n\n  return (\n    <ErrorBoundary>\n      <div className=\"App\">\n        <ContextProvider>\n          <Suspense fallback={<div>Loading...</div>}>\n            {/* <Button/> */}\n            <Page1/>\n          </Suspense>\n        </ContextProvider>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\n\r\nconst ModeContext = React.createContext({\r\n    mode: 'light'\r\n})\r\n\r\nexport default ModeContext"],"sourceRoot":""}